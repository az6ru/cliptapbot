import os
import logging
from typing import Optional
from datetime import datetime
import asyncio
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
import aiohttp
from pydantic import BaseModel
import time
import re

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Constants
API_BASE_URL = os.getenv("API_BASE_URL")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
VIDEO_API_KEY = os.getenv("VIDEO_API_KEY")

PROGRESS_EMOJIS = ["‚è≥", "‚åõÔ∏è"]  # –ß–µ—Ä–µ–¥–æ–≤–∞—Ç—å –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏

SUPPORTED_DOMAINS = [
    "youtube.com",
    "youtu.be",
    "vimeo.com",
    "dailymotion.com",
    "facebook.com",
    "fb.watch",
    "instagram.com",
    "twitter.com",
    "x.com",
    "tiktok.com",
    "vm.tiktok.com"
]

def is_valid_url(url: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Å–∞–π—Ç."""
    # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ URL
    url_pattern = re.compile(
        r'^https?://'  # http:// –∏–ª–∏ https://
        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+[A-Z]{2,6}\.?|'  # –¥–æ–º–µ–Ω
        r'localhost|'  # localhost
        r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'  # IP
        r'(?::\d+)?'  # –ø–æ—Ä—Ç
        r'(?:/?|[/?]\S+)$', re.IGNORECASE)
    
    if not url_pattern.match(url):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –¥–æ–º–µ–Ω—ã
    return any(domain in url.lower() for domain in SUPPORTED_DOMAINS)

class VideoFormat(BaseModel):
    format_id: str
    format: str
    ext: str
    resolution: Optional[str]
    filesize: Optional[int]
    filesize_approx: Optional[int]

async def cleanup_messages(context: ContextTypes.DEFAULT_TYPE, chat_id: int, user_message_id: Optional[int] = None):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if "message_ids" not in context.chat_data:
        context.chat_data["message_ids"] = []
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
    for message_id in context.chat_data["message_ids"]:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
        except Exception as e:
            logger.error(f"Error deleting message {message_id}: {e}")
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if user_message_id:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=user_message_id)
        except Exception as e:
            logger.error(f"Error deleting user message {user_message_id}: {e}")
    
    context.chat_data["message_ids"] = []

async def store_message(context: ContextTypes.DEFAULT_TYPE, message):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–∏."""
    if "message_ids" not in context.chat_data:
        context.chat_data["message_ids"] = []
    context.chat_data["message_ids"].append(message.message_id)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a message when the command /start is issued."""
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await cleanup_messages(context, update.message.chat_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–∫–∞—á–∞—Ç—å –µ–≥–æ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."
    )
    await store_message(context, message)

async def get_video_info(url: str) -> dict:
    """Get video information from API."""
    async with aiohttp.ClientSession() as session:
        headers = {"X-API-Key": VIDEO_API_KEY}
        try:
            full_url = f"{API_BASE_URL}/combined-info"
            logger.info(f"Making request to: {full_url}")
            logger.info(f"With headers: {headers}")
            logger.info(f"With params: {{'url': {url}}}")
            
            async with session.get(full_url, 
                                params={"url": url},
                                headers=headers) as response:
                if response.status != 200:
                    error_text = await response.text()
                    logger.error(f"API returned status {response.status}: {error_text}")
                    raise Exception(f"API error: {error_text}")
                return await response.json()
        except Exception as e:
            logger.error(f"Error in get_video_info: {str(e)}")
            raise

async def create_download_task(url: str, format_id: str) -> dict:
    """Create a download task."""
    async with aiohttp.ClientSession() as session:
        headers = {"X-API-Key": VIDEO_API_KEY}
        params = {
            "url": url,
            "format": format_id
        }
        async with session.get(f"{API_BASE_URL}/download",
                             params=params,
                             headers=headers) as response:
            return await response.json()

async def check_download_progress(task_id: str, session: aiohttp.ClientSession, headers: dict) -> dict:
    """Check download task progress."""
    try:
        async with session.get(f"{API_BASE_URL}/download/{task_id}",
                             headers=headers) as response:
            if response.status != 200:
                error_text = await response.text()
                logger.error(f"Error checking progress. Status: {response.status}, Response: {error_text}")
                raise Exception(f"API returned status {response.status}: {error_text}")
            return await response.json()
    except Exception as e:
        logger.error(f"Error in check_download_progress: {str(e)}")
        raise

def create_progress_bar(progress: int) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    filled = "‚ñì" * int(progress / 8.33)  # 12 –±–ª–æ–∫–æ–≤ –≤—Å–µ–≥–æ
    empty = "‚ñë" * (12 - int(progress / 8.33))
    return f"{filled}{empty}"

async def update_progress_message(message, task_id: str, video_title: str):
    """Update progress message periodically."""
    headers = {"X-API-Key": VIDEO_API_KEY}
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–ª–æ–∂–∫–æ–π
    progress_text = (
        "*üü© –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ...*\n\n"
        f"üé¨ –ù–∞–∑–≤–∞–Ω–∏–µ: {video_title}\n"
        "‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å: ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 0%\n"
        "üìÇ –°—Ç–∞—Ç—É—Å: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...\n"
        "üí° –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
    )
    
    try:
        await message.edit_caption(caption=progress_text, parse_mode='Markdown')
    except Exception:
        await message.edit_text(progress_text, parse_mode='Markdown')
    
    async with aiohttp.ClientSession() as session:
        retry_count = 0
        max_retries = 3
        
        while True:
            try:
                logger.info(f"Checking progress for task {task_id}")
                task_info = await check_download_progress(task_id, session, headers)
                logger.info(f"Task info received: {task_info}")
                
                status = task_info.get("status", "pending")
                progress = task_info.get("progress", 0)
                
                # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                progress_bar = create_progress_bar(progress)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º
                status_text = {
                    "pending": "–û–∂–∏–¥–∞–Ω–∏–µ...",
                    "processing": "–û–±—Ä–∞–±–æ—Ç–∫–∞...",
                    "downloading": "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ...",
                    "completed": "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
                    "error": "–û—à–∏–±–∫–∞"
                }.get(status, status)
                
                message_text = (
                    "*üü© –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ...*\n\n"
                    f"üé¨ –ù–∞–∑–≤–∞–Ω–∏–µ: {video_title}\n"
                    f"‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} {progress:.1f}%\n"
                    f"üìÇ –°—Ç–∞—Ç—É—Å: {status_text}\n"
                    "üí° –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
                )
                
                try:
                    await message.edit_caption(caption=message_text, parse_mode='Markdown')
                except Exception:
                    await message.edit_text(message_text, parse_mode='Markdown')
                
                if status == "completed":
                    if task_info.get("download_url"):
                        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                        keyboard = [[InlineKeyboardButton("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å", url=task_info['download_url'])]]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        
                        completed_text = (
                            "*‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
                            f"üé¨ –ù–∞–∑–≤–∞–Ω–∏–µ: {video_title}\n\n"
                            "üîó –°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:\n\n"
                            "‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."
                        )
                        try:
                            await message.edit_caption(
                                caption=completed_text,
                                parse_mode='Markdown',
                                reply_markup=reply_markup
                            )
                        except Exception:
                            await message.edit_text(
                                completed_text,
                                parse_mode='Markdown',
                                reply_markup=reply_markup
                            )
                    break
                elif status == "error":
                    error_message = task_info.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    error_text = (
                        "*‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏!*\n\n"
                        f"üé¨ –ù–∞–∑–≤–∞–Ω–∏–µ: {video_title}\n"
                        f"‚ùóÔ∏è –î–µ—Ç–∞–ª–∏: {error_message}"
                    )
                    try:
                        await message.edit_caption(caption=error_text, parse_mode='Markdown')
                    except Exception:
                        await message.edit_text(error_text, parse_mode='Markdown')
                    break
                elif status == "pending" and retry_count >= max_retries:
                    timeout_text = (
                        "*‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è!*\n\n"
                        f"üé¨ –ù–∞–∑–≤–∞–Ω–∏–µ: {video_title}\n"
                        "‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )
                    try:
                        await message.edit_caption(caption=timeout_text, parse_mode='Markdown')
                    except Exception:
                        await message.edit_text(timeout_text, parse_mode='Markdown')
                    break
                
                retry_count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
                await asyncio.sleep(2)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
                
            except Exception as e:
                logger.error(f"Error checking progress: {str(e)}")
                retry_count += 1
                
                if retry_count >= max_retries:
                    error_text = (
                        "*‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞!*\n\n"
                        f"üé¨ –ù–∞–∑–≤–∞–Ω–∏–µ: {video_title}\n"
                        f"‚ùóÔ∏è –î–µ—Ç–∞–ª–∏: {str(e)}\n"
                        "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ."
                    )
                    try:
                        await message.edit_caption(caption=error_text, parse_mode='Markdown')
                    except Exception:
                        await message.edit_text(error_text, parse_mode='Markdown')
                    break
                
                await asyncio.sleep(2 * retry_count)

async def handle_video_url(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle video URL messages."""
    url = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏
    if not is_valid_url(url):
        message = await update.message.reply_text(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞!\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–∞–π—Ç—ã:\n"
            "‚ñ´Ô∏è YouTube\n"
            "‚ñ´Ô∏è Vimeo\n"
            "‚ñ´Ô∏è DailyMotion\n"
            "‚ñ´Ô∏è Facebook\n"
            "‚ñ´Ô∏è Instagram\n"
            "‚ñ´Ô∏è Twitter/X\n"
            "‚ñ´Ô∏è TikTok\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ."
        )
        await store_message(context, message)
        return
    
    context.user_data["video_url"] = url
    user_message_id = update.message.message_id
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await cleanup_messages(context, update.message.chat_id, user_message_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    processing_message = await update.message.reply_text("üîç –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ...")
    await store_message(context, processing_message)
    
    try:
        video_info = await get_video_info(url)
        context.user_data["current_video"] = video_info
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        await cleanup_messages(context, update.message.chat_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
        keyboard = []
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        formats = video_info.get("video_formats", [])
        
        def format_size(size_bytes: int) -> str:
            for unit in ['B', 'KB', 'MB', 'GB']:
                if size_bytes < 1024:
                    return f"~{size_bytes:.1f} {unit}"
                size_bytes /= 1024
            return f"~{size_bytes:.1f} TB"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
        for format in formats:
            if format.get("resolution") and format.get("filesize_approx"):
                resolution = format.get("resolution", "")
                size = format_size(format.get("filesize_approx"))
                quality_text = ""
                
                if "480" in resolution or "360" in resolution:
                    quality_text = "üìº SD"
                elif "720" in resolution:
                    quality_text = "üì∫ HD"
                elif "1080" in resolution:
                    quality_text = "üñ• FullHD"
                elif "1440" in resolution:
                    quality_text = "üéÆ 2K"
                elif "2160" in resolution:
                    quality_text = "üì± 4K"
                elif "3840" in resolution:
                    quality_text = "üñ• 4K UHD"
                else:
                    quality_text = "üé•"
                
                button_text = f"{quality_text} ({size})"
                keyboard.append([InlineKeyboardButton(button_text, callback_data=f"format_{format['format_id']}")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∞—É–¥–∏–æ
        audio_size = "~40.02 MB"  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∞—É–¥–∏–æ
        keyboard.append([InlineKeyboardButton(f"üéµ –ê—É–¥–∏–æ ({audio_size})", callback_data="format_audio")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        duration = video_info.get('duration', 0)
        minutes = duration // 60
        seconds = duration % 60
        duration_str = f"{minutes}:{seconds:02d}"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        views = video_info.get('view_count', 0)
        likes = video_info.get('like_count', 0)
        comments = video_info.get('comment_count', 0)
        
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        description = video_info.get('description', '')
        if len(description) > 300:
            description = description[:297] + "..."
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è —Å Markdown
        caption = (
            f"*{video_info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}*\n\n"
            f"–ê–≤—Ç–æ—Ä: *{video_info.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}*\n\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ:\n_{description}_\n\n"
            f"‚è≥ {duration_str} | üëç {likes:,} | üëÅ {views:,} | üí¨ {comments:,}"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ø–æ–¥–ø–∏—Å–∏ –∏ –æ–±—Ä–µ–∑–∞–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if len(caption) > 1024:
            # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            if video_info.get('thumbnail'):
                message = await update.message.reply_photo(
                    photo=video_info['thumbnail'],
                    caption=f"*{video_info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}*\n\n"
                           f"‚è≥ {duration_str} | üëç {likes:,} | üëÅ {views:,} | üí¨ {comments:,}",
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
                await update.message.reply_text(
                    f"–ê–≤—Ç–æ—Ä: *{video_info.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}*\n\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ:\n_{description}_",
                    parse_mode='Markdown'
                )
            else:
                message = await update.message.reply_text(
                    f"*{video_info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}*\n\n"
                    f"‚è≥ {duration_str} | üëç {likes:,} | üëÅ {views:,} | üí¨ {comments:,}",
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
                await update.message.reply_text(
                    f"–ê–≤—Ç–æ—Ä: *{video_info.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}*\n\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ:\n_{description}_",
                    parse_mode='Markdown'
                )
        else:
            # –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å—ë –≤–º–µ—Å—Ç–µ
            if video_info.get('thumbnail'):
                message = await update.message.reply_photo(
                    photo=video_info['thumbnail'],
                    caption=caption,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
            else:
                message = await update.message.reply_text(
                    caption,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–∏–¥–µ–æ
        await store_message(context, message)
            
    except Exception as e:
        logger.error(f"Error processing video URL: {str(e)}")
        error_message = await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ.\n"
            f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}"
        )
        await store_message(context, error_message)

async def handle_format_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle format selection."""
    query = update.callback_query
    await query.answer()
    
    format_type = query.data.replace("format_", "")
    video_info = context.user_data.get("current_video")
    
    if not video_info:
        message = await query.message.reply_text("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É —Å–Ω–æ–≤–∞.")
        await store_message(context, message)
        return
    
    try:
        video_url = context.user_data.get("video_url")
        if not video_url:
            message = await query.message.reply_text("‚ùå URL –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É —Å–Ω–æ–≤–∞.")
            await store_message(context, message)
            return
            
        if format_type == "audio":
            async with aiohttp.ClientSession() as session:
                headers = {"X-API-Key": VIDEO_API_KEY}
                params = {
                    "url": video_url,
                    "convert_to_mp3": "true"
                }
                async with session.get(f"{API_BASE_URL}/audio/download",
                                    params=params,
                                    headers=headers) as response:
                    download_task = await response.json()
                    logger.info(f"Audio download task created: {download_task}")
                    
                    if "task_id" in download_task:
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                        await update_progress_message(
                            query.message,
                            download_task["task_id"],
                            f"{video_info.get('title', '–ê—É–¥–∏–æ')} (–ê—É–¥–∏–æ)"
                        )
                    elif "error" in download_task:
                        error_message = await query.message.reply_text(
                            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {download_task['error']}"
                        )
                        await store_message(context, error_message)
                    else:
                        # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ä–º–∞—Ç–µ –±–µ–∑ task_id, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
                        format_id = download_task.get("format", "")
                        if format_id:
                            params = {
                                "url": video_url,
                                "format": format_id
                            }
                            async with session.get(f"{API_BASE_URL}/download",
                                                params=params,
                                                headers=headers) as format_response:
                                format_task = await format_response.json()
                                if "task_id" in format_task:
                                    await update_progress_message(
                                        query.message,
                                        format_task["task_id"],
                                        f"{video_info.get('title', '–ê—É–¥–∏–æ')} (–ê—É–¥–∏–æ)"
                                    )
                                else:
                                    error_message = await query.message.reply_text(
                                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ."
                                    )
                                    await store_message(context, error_message)
                        else:
                            error_message = await query.message.reply_text(
                                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ä–º–∞—Ç–µ –∞—É–¥–∏–æ."
                            )
                            await store_message(context, error_message)
        else:
            async with aiohttp.ClientSession() as session:
                headers = {"X-API-Key": VIDEO_API_KEY}
                params = {
                    "url": video_url,
                    "format": format_type
                }
                async with session.get(f"{API_BASE_URL}/download",
                                    params=params,
                                    headers=headers) as response:
                    download_task = await response.json()
                    logger.info(f"Video download task created: {download_task}")
                    
                    if "task_id" in download_task:
                        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                        selected_format = next(
                            (f for f in video_info.get("video_formats", [])
                             if f["format_id"] == format_type),
                            None
                        )
                        
                        quality_str = ""
                        if selected_format and selected_format.get("resolution"):
                            quality_str = f" ({selected_format['resolution']})"
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                        await update_progress_message(
                            query.message,
                            download_task["task_id"],
                            f"{video_info.get('title', '–í–∏–¥–µ–æ')}{quality_str}"
                        )
                    elif "error" in download_task:
                        error_message = await query.message.reply_text(
                            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {download_task['error']}"
                        )
                        await store_message(context, error_message)
                    else:
                        # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ä–º–∞—Ç–µ –±–µ–∑ task_id, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
                        format_id = download_task.get("format", "")
                        if format_id:
                            params = {
                                "url": video_url,
                                "format": format_id
                            }
                            async with session.get(f"{API_BASE_URL}/download",
                                                params=params,
                                                headers=headers) as format_response:
                                format_task = await format_response.json()
                                if "task_id" in format_task:
                                    # –ù–∞—Ö–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                                    selected_format = next(
                                        (f for f in video_info.get("video_formats", [])
                                         if f["format_id"] == format_type),
                                        None
                                    )
                                    
                                    quality_str = ""
                                    if selected_format and selected_format.get("resolution"):
                                        quality_str = f" ({selected_format['resolution']})"
                                    
                                    await update_progress_message(
                                        query.message,
                                        format_task["task_id"],
                                        f"{video_info.get('title', '–í–∏–¥–µ–æ')}{quality_str}"
                                    )
                                else:
                                    error_message = await query.message.reply_text(
                                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ."
                                    )
                                    await store_message(context, error_message)
                        else:
                            error_message = await query.message.reply_text(
                                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ä–º–∞—Ç–µ –≤–∏–¥–µ–æ."
                            )
                            await store_message(context, error_message)
                        
    except Exception as e:
        logger.error(f"Error creating download task: {e}")
        error_message = await query.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ.\n"
            f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}"
        )
        await store_message(context, error_message)

def main() -> None:
    """Start the bot."""
    if not TELEGRAM_TOKEN:
        logger.error("Telegram token not found!")
        return
    
    if not VIDEO_API_KEY:
        logger.error("Video API key not found!")
        return
    
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # Add handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_video_url))
    application.add_handler(CallbackQueryHandler(handle_format_selection, pattern="^format_"))

    # Start the bot
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main() 